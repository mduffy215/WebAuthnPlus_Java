/*
 * (c) Copyright 2022 ~ Trust Nexus, Inc.
 * All technologies described here in are "Patent Pending". 
 * License information:  http://www.trustnexus.io/license.htm
 * 
 * AS LONG AS THIS NOTICE IS MAINTAINED THE LICENSE PERMITS REDISTRIBUTION OR RE-POSTING  
 * OF THIS SOURCE CODE TO A PUBLIC REPOSITORY (WITH OR WITHOUT MODIFICATIONS)! 
 * 
 * Report License Violations:  trustnexus.io@austin.rr.com 
 * 
 * This is a beta version:  0.0.1
 * Suggestions for code improvements:  trustnexus.io@austin.rr.com
 */

package io.trustnexus.util;

import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.Provider.Service;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.HashMap;
import java.util.Iterator;
import java.util.UUID;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import io.trustnexus.jdbc.mobileapp.TransactionDao;
import io.trustnexus.jdbc.mobileapp.UserDao;
import io.trustnexus.model.mobileapp.Transaction;
import io.trustnexus.model.mobileapp.User;

public class CryptoUtilities {

	private static Logger logger = LogManager.getLogger(CryptoUtilities.class);

	public static final String digits = "0123456789ABCDEF";
	public static final String END_OF_TRANSMISSION_BLOCK = "&ETB";

	public static final String CIPHER_ALGORITHM = "AES/CBC/PKCS5Padding";
	public static final String WRAPPING_CIPHER_ALGORITHM = "AESWrap";
	public static final String KEY_FACTORY_ALGORITHM = "RSA";
	public static final int PUBLIC_KEY_MODULUS = 4096;
	public static final String MAC_ALGORITHM = "HmacSHA256";
	public static final String RSA_CIPHER_ALGORITHM = "RSA/ECB/PKCS1Padding";
	public static final String SECRET_KEY_ALGORITHM = "AES";
	public static final int IV_LENGTH = 16;
	public static final int SECRET_KEY_LENGTH = 256;
	public static final String SECURE_HASH_ALGORITHM = "SHA-512";
	public static final String SIGNATURE_ALGORITHM = "SHA512withRSA";

	/*
	 * If all your users have newer phone (Android 8.0 Oreo ~ API 26), you might
	 * consider using PBKDF2WithHmacSHA512.
	 * https://stackoverflow.com/questions/19348501/pbkdf2withhmacsha512-vs-
	 * pbkdf2withhmacsha1
	 * https://developer.android.com/reference/javax/crypto/SecretKeyFactory
	 */
	private static final String SECRET_KEY_FACTORY_ALGORITHM = "PBKDF2WithHmacSHA1";
	private static final int PBE_ITERATION_COUNT = 16384;
	private static final int PBE_KEY_LENGTH = 256;

	// ------------------------------------------------------------------------------------------------------------------

	/*
	 * Code for generating test values.
	 */
	public static void main(String[] args) {

		// String infrastrucutureProviderPublicKey =
		// "30820222300D06092A864886F70D01010105000382020F003082020A0282020100815BF0CC4A95BD40B8526F23E0F40B048E6734534A4455A365F9006801D35C503924D9579F9F042D4D1A5D9BBBB2D2C270A930A9DCC38407F4DC6AB6C05EC15D41EFC586CA82F6794712BB0303227C60C61EB18A7E7E5FAB3D504BF0924EF5B0AE17B4C867C8ABCD93332ECA4CE0A20E9A4651D861A9D3790B94C9479EF22D4192D352E8435DEFEBF05AD37F98B829B319A6C05E7D0648B394584ABBF0B0CB8F5C774964B71BE26C72C5811235B36A0848F09A8E19BB967C16336FD0980323DB9FF45D126989C38F50BF9CB660B79BC4409C9264AD683172CBE5295D02EC748CBA7949A417845900A0EFD48EAD67E28CC5630C2E2F9662C035E5E6B50C06248F93B187B92F00A093553FF3491771B1CC82AC821F6C92E14A7FA689E4E7766DFD77CD16DE9BD7E497F212ECF8A6FDD7FF5D9ED2D94225D4137C72B2111271F53C26AD57CC5EB5CE98A48F1B2DD0DA537AACC884B621BC81AE06CAF0EF2760BA2D7D85F0978383DB9973830ECA102ACDDF4A46D0BFFFAB447D29ABCA564777D32036A20C590A792D7054132C59375D851511150B03A1330677D1690896E7C2202B477D5DAE83E864D319EE79C305995D3356F07EC13DFB3E35961B944D748C1220ABEFA14750FFB7DF7B33E68060719003988FD76D255C040BE96EFA4E6EEE80A0A168DA1E5B7A0E30673F7827B87DB3698CDE0C479161E0275122A1F98492A8590203010001";
		// String infrastrucutureProviderPrivateKey =
		

		// String credentialProviderPublicKey =
		// "30820222300D06092A864886F70D01010105000382020F003082020A0282020100AE5E2380EA50BE5C65FE6EBC136CC8F2AF50B83C21D5236296F7E83EC4BD0F4B083EE1B64E71603F3E8F3FB160FEE56F0558ADD63E857263331F38EC6E4CB4554860A83FBC1DFD2CF93E054B898019F670DFB6726F32221E5637AA73A4FD193FFDBD6EBC0F054167A5B069899DD7D028B9EDCE35107FF281F00BBC0F258DC6BA391DB8296FF664A8A30A820D4DE9109CC32602D5374D18F96C52F62FCFAD1A64CFDB67F814F42B9CCDF0C10F58D2A553E78F4C4EC9DC42E1EBDF1D7B86CEC85111D8FA6E5DCF5913220E8D4BC99A34F1400882C87EAD9AF06106EC2E57F73306F89BB1EA4F471F02DF6D16BB72123F9D0B7FD4A95E342BB9113BAF6A13CABABF382B90AD58C3514811FA18F552A7CC05D39BB6CE98392BD34DD7E9AD3602875F0B75C43F61A49EB999788AB35495C91EEBA3BD026EA6E4ADD26B00C8E83DDD603E0018AD71AFA04E04155977BC196C08061134CE2F886A0722751F4BCF7956EFDD707978EEFF575BBE81C689C6E9DFC856545E578F45A4D272E3A6527A53F5AC4F3E7B37E5652C1CB483E8BBC98F01CE0395B1B018621110D0CEB54C1D3F37E5D97EB35769702CD20122904E3A1323D44A388F6A647D0E4337EEF0E02034229A9CEDFBFFEEA6733DDCAD38A340B9792CDDD4D7DCBCAFD525C66C91BA1A578619B4FCE4A306A3DE3212AEA35508807EE65831E418840563A1189A7438A15FDEC50203010001";
		String credentialProviderPrivateKey

		// String applicationProviderPublicKey =
		
		// String applicationProviderPrivateKey =
		// "30820944020100300D06092A864886F70D01010105000482092E3082092A0201000282020100A7289F64C41F69C46EB5C48F44935975AC1B29455556CF584A807A210E11917D1FA57300CA6F4134A3523F3FB341725210443BDF5FBF5161C5B51AA058DE0310E89D562465254C42685144E72A9AD7FCE069774F69465428095412F742B60811EE05E1BB8A577FD8E4C76DC3D320D5A2A0B7270C62BAB7C60E825FEA297CB8167A731EA51014D2E8D5A29A71BC238304455102F4793D470A96F933DE4D27A98797DCCA10CCED5802FD2177C947B548B68616457C1CB1E23DC39BA485F69BD6B8A2AA5B8BB7FEEB31525E1D00CA9B260C91E5C17F679975C1B8BB8E21AAA9DD2118CD243F42CB71D7E9781DE2B3D6B6EA498B87C12CBD3DBE7EFEA616F1CA00AA2194A8A1EDD962245246DEB321CDCDCB9292DCFAE9F15167F3BC43C5B7DD8CD5CDE157E379619FBCD31F357E260A4203317440A8438B6A8954A992A21EBB3FFA9CC31AB96BE43CF3FD429AFECB40621F20139067EFE15CF82CAAFB0EAAD3C37F87AFE6AF93B6E36C44D19049A4B8D4842083081E5EC42C57F7D39A2D2C7216A37A9932775F2A44A93A6CEFCC665FFBC9C0AFA089485A228257E134148B60F1BCEB6FBF785DF86CA3A59074D505B6040427F39646FC7C8F22CE326F8DDFDFF268DDAC8B3752BADFE2F2A759AD82F8B70AD688D348ACCCBBCFB827B8B9CE0E57C522068DC11D201F75A3456BC96F25AEDE324B26B47599C65EF3473BE7233F95490203010001028202001935240C531315A51CB8E682606A04149DB69EDBA8C9E58CBFF76DF36C26B414F55FC2DEFCA8186232BAE574DAB864E00139F8F96F7BEF6EDA1CBC7E2FC89317CAAC676027AC9F3A6876D0F83751907EBEECC8A43E10F001F59E2B1A048264E72748D5C8AD4D12A787A09769EF7DC519B838C677B4AFC9A4E16D41BF93300EA6BD227D1D913642B3FFFB7C64E865468DAF524F2AC4D9BBCBDA068C8EDA7DBFB005F3B2B923DE2AE6907BAA8FBCF3969A87CFF5FC886B3EDDE790A217DD9F949AD554F167398104C0B45622F38A9A28FBBE48B28C5EF8226CEB49C55E485943528965EE3068073C0CBE5571D44D20750711BE2BE3B2B67B082E2882AD751AEC4C7C14D73246D4A0976DF8B050063B879F0F5D7BF2598A90E04592B705C5AB73B076240091C20868008780C122239A1D099FC4A15DE094EDF184F64637B480ED08A9F95ADD9488E878682F7EDF960684EE261790225394E0E699F915EE4D64E3E4AF088DE53C263747F9DEDA557A892AD0373BDE2D12D46D3A7705FBBD0E9701AF8879AB4A346E26EFB475E4256B24481E609E320C10560ED64EF431D91A38DA9438D4FD0AAFFA18D5FAE20A58753D9E870A002151EEC64FA9D6F1C6CB95BAEAAE18FC1BA74816319C43E85B6F97D028643C05CFDD45A7246FA7CB180F80C2552AC2BB82EE7042A9ECC09BF61A304E05BD8AA3A1D8ED00DF23714F203A142392B10282010100FC10BC1DF25EFAD21A130B7ABD46F567A930974216DC56B6DF55418963912F5C08C1E3BA6E4654FD7C2B512C9A33E0DE755FD686E976DE3BD1D3535B0FD90DC209271F5472A5A0B672CE23B0D061E2A17B2E7DECF818B0A0F3C067FF5EA41C747566C91E83F5E1916385DDBBD5B85E26676800811F8FEAE17786EFA3EAE7B22934AD9BD189317FE3BA9F9EABC0F5EC779F5A47CDA3CCE501DAF247C6E13E2A948286D6ABD7D2B629156DB35F2C82783A1F0288D9AF57A447ECAF78DF8C734C7BC03C5D0A12A67A81BDECF7450081EBC94F2CB93BA249FDBB961655FE3DDDC7987B7A1CF340DD72F48F7BAA8448277AC94DA5C033AD91525926DCEC6A4521B65D0282010100A9C498BDF3E41A63392864FBF8FD1F597279867541B75430E6523813552C56F34923872DEC683FC425011600DD73919028E455C1DFDFE640A3C3D9F1FFEBD175308793159F45446BBC23B982BF4371830166F1BDE2051E53E25499230DA0107AD1B3FE4E9E77D888DDF568B8BBBD357EB24A793A031896F8C2DBD6AC8709709CB85430EE024EFD8E012C21DF4FA831CE7F6602CE48769210E08B1FA9556F17F29295171F3B658AF5A9640687E9E1845D2692017BE88125996879FB62CE0959DFDC7E6FBA3214676364F185EC31C1ACA77F96703A6F8C3F22097E0D85A342348044AE050C768FF6BB4B267ED32B1487DD094B5FE8C2993F67C7384DBF38C953DD0282010100A647DFE11D7F3C951730531550019C681ABB7C3CD3D9DCB65C93E05CE2BAE6F41EAED12CAE0C658AA6BBE89BB4C9DE60C22B4BD8C9F069602AE5EE8A16E547E725A4924D622812E1E8D045C9215E4163E75FDF2050F5F0A6ECC5939569F876F0F875AADD1F8E37947283DFA746B08E236579BD4370EFBEB1A7E8F2F33E4644485C80DE5696DB7993600C665EC537361C1F9A2DDDE15D8C00F24F7BBC1DE0A5B43C7AF8E879C27DFA923140EFDAEBE2A5ECC8FE4024247BB21AD812B3DDF23D95315660C60151A3652D46424459B65B35FCADF32FFCBA34D0E78CAA83C28A285E55AE53A4C0B89559F1C151D65BC6F7800E61F66DE0E509DED7FD4B543B70A6DD02820101008DCBF253FE28D0CD7D893AC7A7112CA5165360B6019CB18A6265DC0671C6A61D7042677F390D5DED638703ACD74AD71314C49AC863486CD622B2CC103054F44F30A89C769BE04C24BC310E9AA14C20BC6E686093DBFBB07819FBD5288D11DB91EA23AFCE54D7FF195A62C7043D72ED0294C2557CD9E728FA402F44A037EDEF8C46FDB31CA8FAF7172BED83A134B4645D78D5689489BBD78697363CCCBFDA19A3774165DDA54BCC042266B479C324A4DCF5015092010215B88BA60F0D58D040AC154BD9E028421894D154562A90E8966014D63F88DF70C1AE99451AE03B1B6A2494B8D0E8B702C9EF67F69049AA9AEC5BF78E685E4E6397AD039E087A26612A550282010100D318BDFD6C609287A7586FE37C8F6EF8D339EC0FDFBA7723067E637C061B3ADE23E52B546DA4C3A1D7463821CF7FAEC81F00316A52D830DEBF0B8A658DB708202E08CDAE1C50746E973653DB0845F04A53DE153C2A750BCFC017F6EA4A9A0955C8A597BF6A5C811CD3DF000454F97743493ABF40094B840983A40F5CD298053E8EAA06886286BDA575058575C6F3C911BE13B3D5D308622845B01875ECC9697ED72F1C076DA370A296FEE4CCF768516A9BC5F264B3B4FFE3DB9C3A6273A9BEDA95BA45D9DE29C946A0666E068379A79EE77DA8635360C440B0113BC6B0DB2AEF893DF10E8B0EFD7C06C0848E5A8561834FCFBB4BBA63AAE382EC3068EA626155";

		// String credentialHolderPublicKey =
		// "30820222300D06092A864886F70D01010105000382020F003082020A0282020100E8CE2E538113696810A477715D4CF5A23203F1AE2EF8B1F7C5F434A98E86C70BAB05097FFBAF71B02C3ADEFDA364CC2738203AFE1FDDE350471BF7BA577DA1CE2EE8C980F990AA48D098D11CA763585F9801E8811A9608F2F879C49488A4751412EB19CF8BBE4BA5F34D9F2A9667D659A660A3A77288FE8E50C19A944A3ED20E6685E8EED34E31C90B9AE1A0210DF9DC2A5E7D13BD566B3102F56FA271E500574EADCBA18E8FD89BA6CB66657552AF13E09F78FAF184B02DC8D4C3ED9C267A9E7225D54B2B35C1B3042BA89CCA79B03BCB002E5AE3B1B090E7ECDDFEBE050EE678756BE7E83AA787970BB4F8B08B68390B020F00941CAB25419957300FCF181035EA60FFB504FC357F7D081F53811588729283B837AAB396191DE5043D340FB20E9C685717691BB7157EC7F85B4FDA4FA14A299C1D83F874B2431E6F53F43F98460996AC116C76A867D3AED79776C9E4A0D8DDE4496272FF0B536D48C47837CF0627C3721855A1C1F35AF721F5F6A3E53DE5517C0C4DF1AAC6AA3E2DB3D00BE7D17507E9B587A2999DC95AF806B9AFA8AF338C5824471EF7EFD6607381D5DA909DCAD8F7EA7F75DF13D4C5D09AFE9EE5F3E6A2A916D575B07F6E4308FF75D6EB42159D8C07BFE9CC15D34F41F00EB9DE9E4AC9F79D3F836A8CCE48D70DF96E3CA5CAF3C9D66564F84201C3AF985A58C5C4AB77F1DDB8C2AD7EADCFFC1BE283270203010001";
		// String credentialHolderPrivateKey =
		// "30820943020100300D06092A864886F70D01010105000482092D308209290201000282020100E8CE2E538113696810A477715D4CF5A23203F1AE2EF8B1F7C5F434A98E86C70BAB05097FFBAF71B02C3ADEFDA364CC2738203AFE1FDDE350471BF7BA577DA1CE2EE8C980F990AA48D098D11CA763585F9801E8811A9608F2F879C49488A4751412EB19CF8BBE4BA5F34D9F2A9667D659A660A3A77288FE8E50C19A944A3ED20E6685E8EED34E31C90B9AE1A0210DF9DC2A5E7D13BD566B3102F56FA271E500574EADCBA18E8FD89BA6CB66657552AF13E09F78FAF184B02DC8D4C3ED9C267A9E7225D54B2B35C1B3042BA89CCA79B03BCB002E5AE3B1B090E7ECDDFEBE050EE678756BE7E83AA787970BB4F8B08B68390B020F00941CAB25419957300FCF181035EA60FFB504FC357F7D081F53811588729283B837AAB396191DE5043D340FB20E9C685717691BB7157EC7F85B4FDA4FA14A299C1D83F874B2431E6F53F43F98460996AC116C76A867D3AED79776C9E4A0D8DDE4496272FF0B536D48C47837CF0627C3721855A1C1F35AF721F5F6A3E53DE5517C0C4DF1AAC6AA3E2DB3D00BE7D17507E9B587A2999DC95AF806B9AFA8AF338C5824471EF7EFD6607381D5DA909DCAD8F7EA7F75DF13D4C5D09AFE9EE5F3E6A2A916D575B07F6E4308FF75D6EB42159D8C07BFE9CC15D34F41F00EB9DE9E4AC9F79D3F836A8CCE48D70DF96E3CA5CAF3C9D66564F84201C3AF985A58C5C4AB77F1DDB8C2AD7EADCFFC1BE28327020301000102820201009013A1E9FDF4F483F9E0BF270295F162AACF740FD774043812637B00007BFACD86CEBC3D5F9709A5FD09861DB4B45A005FA4DABD911D3263E94E2EB73D143C422D17D63522BE5C146A3C591601A5E2F86E4BA807D65B4A388C7C57A391192E77F8E954F4F44815EB233343B1089A44B700D7C810863AB0478544FC14900A66D790AD8925DCD204CFA685F8E2AFF24552F349BCE0AD89C116F8FCCA54DF65D91B2F4F31B9CF4FC8BF33AFA7B45CB28A35A40B2DC52819752B30A2348B65DB0E81E6A4F166EEDBFAFF7E3242CC9E26476209D517DB1A154AEFB3090DAE6D0D16569DF01592D54F0F85437E7446808416414F45BBE120C8C9466A5DAAEECCA9DEFA63217939E196D88CBC232F29F875AE1B512A799BACC679E45DD238D91EE1BAD4CF6F301787C8211246B49694EB1D10BC5B598841C0BB49FD64EDDB1C9ABDB52D0C1287B07DAD5AF9C6444F9CEE2BA5F1263D3977B073B465C13C307FA2B5F337C8C1ABA43D74A90E40F8C3A04B570DB25DF26A0D081D1821F60E5E6BFE71CFC509042520584F081181E4698C3479F21AFCBBCD5DDDD5159BAF25755EF0F5648B1A4488D2096C2AF952610032651928419B237F95C34EB856AD390BD5AB5B3F7D31D80C16920115CC2168C9C348396AFAEFDE490ABA6F8B4000508324B82549EA41BE72057A910D67F44C222EA8FE097A1FB248985E930BAB7BA6D8FAF1B0CBA90282010100F73DCCE86060C9A897411C7DC3F5672E4725B34917D015D9ED5070A6DA42C146A168D2AE53DA67EDD10F6F511A09733D004A4A706FC7D6106346E61DE5A2CCFBCD1FE3204DF7B84251E41EE094109051A226DABFC11F8940AE0AB53A3DB3A8A5D2DE07BA74F9C19F10A7B52509127AF98A3E922CE004BE0E2E4FA18F76C6727CCBCA39FEA16ED869602B8E0FEA946A92A7A8F7661EC074A4EF9A8D23F89522ABE7678A9B626A8D6BBAA106BE059A06E6E86F72BAB7977B56B6D08B5446682841B9BD9465619AA75A5673DD32D330DFD6CCE1BB1540D86D3D70E5EB3954D0BFA21589452D4FFE6C01374879D8780CB30EBB583C86887441295F8D146A03B88CA30282010100F10D7655C977D4BC0D4A86262C826E432617C87C90EDC4AACBEA9922980695CF14EFF9C5B9238908ABB25CF46CC5097DD0B2CB6CEFB49B2B83FA3B44E3EC7F565BFEB3C2AADF609ACE7ABCF7698BB4200FF4AC47C5822EF4B13B3367248701CF5D60E5212BB1B9ADD6E8E1050131AFF7158C73CFA46608464AF4E827C5F2A456A2EB06A5446FBD19C6FAFF60D1072A4E37D2522E6C9773B0D8A054C6917320A0CFB68EDEE4D03063A9526E40FFA60362F87904F71203A723CD39B693F369AD790B15B7D9E740FD0EB39BB0C5C6AFF1D958615EF63BD840B39DB677D3D856D086B570F3DBCC0971CDE2729B1FF9CDA4260DAF1ACEF5145EE2E2837D44AEAD33AD0282010100DD7B825565092F7D94C9E25113BB820C25F632EEB6A354FFDDA4E2D5C5CE693FF1966AAD7A36BC4581B3B6FFCB384E00868306BE44949B4220FD4165E4F1FB79529F4F2300557ABE068839D4EB2F0F69E1BDB6D67295E2A98B7FD22B735CBF2695890B195072F0ADA308E9B05CB92E6ADF1A006EACDBF2B9D768C48D3554BEF8E6C2A9435EB062B3BB50293A3EE567B72AF4A573D8F68547BFD10EC0FB8DF5FA53192144E35C1A863830CA4E6DCC3684A2123C8FE1A994F6F05C4F8456723625F2D34EDDA71B18F2476211F4D6D6009F76F87C54A4BB7CD8BE8B6935F9B1EB09B30B3E6A422FE3E70EF4211AF728413B603EC231AE899E5A06DBE63EB6489BCB02820100402B1B433EFC7D4F0A22BA8F52EDEDB8465DB26B269184F70A8D8AF26091F0334E198BDE0CA8DF03C5E11749A1E2D9E1FA3A7E58A37EEA87ACFC61E6B6DDF00FE731685CFBEBB6E5BEED817C4346834EBDB09E6404B9E1121653F21D14E6339F25F673485F3F52746A6F57E76327FCF5C370BE2B9A51E705FF522EB2D7C8FDE26A403266B04F2681C42C70EB2EF9BF534F1CD7EFAFCCA9697C6141F0122C19957575DD968C46B77AF04A173B8A5281384978BDCF9FA6054A4C897E86E8174BAC9B3CCED25CF339EA3DF9C617000B3A50676C9440EC316717E975F774177514D1A75F482B4CA77EFA15BBF87B8C9E278251C63956BA7B0FBF4A1942B193E65B89028201004340A2E602F840CA2E4CC6F353B88EAC34B9358759C730FF18C74F86772D35DE41E83E2DE0001A34A5CD33D36BFD990EABAFC6C45D7AFD878149A657776348F2DBD395ADD5E861958A278A2E254B52226AD17AE943EB39A4ED59606BF52F6D99362CEB6CB6D713320A328874E33736AEDBFB8630453B257C5A69F55A63A53E6D2534BFD6C393F9BEB90AA1652D2F57599617B927A00C219446C069A51E37E8B0B90975F1E71A59E66239C4440AABA268F010AA94DA2A69195F28AA6D791DCA2B0A4648B40C1514A3098E781CFD947306E16BD2F31F16952A81F14E4A9786FA609F015587AF10EDA48E30CF324F8667A47DF26E7036815FDB59B009FB26106D6D";

		// String credentialHolderPublicKey2 =
		// "30820222300D06092A864886F70D01010105000382020F003082020A0282020100D75A7787EDD2DADD508D3F000AA350639A7878A8B63D0C34A9EF4C2D9DCE325602B323BF67C8641906112B76D2F8AB531EB7E45592D1798385B4D449E4C8C38ED9D53431DBCC135BB098D9D59E68671643C8AB0EE4DE709C24B7290E923120CCE417AE431D80D059B408E43E17B0299EAAFC7B35C56400AC5A2E4BE81980E6FF8859FC67BF2DD143275FCE7E87EC18196FE12236AFC314D9DAE3DAFF4A01CDFDF60DA5B731465583AC5EE5D56292ED973C8E4D7D8687FF3BA78DD87923D4991237C62B50972FB6EE4F7435F7C7FA1B61A872C4056822D49D54C9A294528A46FFD3E49F16E58FB6E516AB0C5A8A2762BBC6CCB8B50747038C526361D55B708C5D128B16808C86D41615578B3705E1283FC56C85AC0EF8AF1C1DCA31E19EE85BEF5BB3E4AB938865956F717EE938A75DB6009999F0918D14F8FEF76D052A5EC224FE7CC2BC47FB268080DDF981D56E3591214935340825D7289C1AF47CBE55EB5E8A412DA405B0846B9EB0416664C6D95AD0092F315C51830EE6CDDC3C2A026F384CE6EBC163594C713D27756F7A719FBEF46FAAD4AA7307919185279BBE28378FCD15DA6EB356C44944821D8C647F9B65278609C8531C08D552142FDCEDC97B61BE11A66149D49223F875BA47B182974CA305B58B656B9D2BB3C0B40B6E40AB320A86265144B631CFE966A6D703623D5DDFDB8C96E785240C83FAB63AFF76F3A90203010001";
		// String credentialHolderPrivateKey2 =
		

		String credential = "\"type\":\"Credential\",\"credentialUuid\":\"1489930365410-E5EC9805-A9C4-43F0-8F0E-2B0167689643\",\"activationTimestamp\":\"2017-02-28T12:24:14.888Z\",\"expirationTimestamp\":\"2018-02-28T23:59:59.999Z\",\"publicKeyAlgorithm\":\"RSA\",\"publicKeyModulus\":\"4096\",\"publicKey\":\"30820222300D06092A864886F70D01010105000382020F003082020A0282020100E8CE2E538113696810A477715D4CF5A23203F1AE2EF8B1F7C5F434A98E86C70BAB05097FFBAF71B02C3ADEFDA364CC2738203AFE1FDDE350471BF7BA577DA1CE2EE8C980F990AA48D098D11CA763585F9801E8811A9608F2F879C49488A4751412EB19CF8BBE4BA5F34D9F2A9667D659A660A3A77288FE8E50C19A944A3ED20E6685E8EED34E31C90B9AE1A0210DF9DC2A5E7D13BD566B3102F56FA271E500574EADCBA18E8FD89BA6CB66657552AF13E09F78FAF184B02DC8D4C3ED9C267A9E7225D54B2B35C1B3042BA89CCA79B03BCB002E5AE3B1B090E7ECDDFEBE050EE678756BE7E83AA787970BB4F8B08B68390B020F00941CAB25419957300FCF181035EA60FFB504FC357F7D081F53811588729283B837AAB396191DE5043D340FB20E9C685717691BB7157EC7F85B4FDA4FA14A299C1D83F874B2431E6F53F43F98460996AC116C76A867D3AED79776C9E4A0D8DDE4496272FF0B536D48C47837CF0627C3721855A1C1F35AF721F5F6A3E53DE5517C0C4DF1AAC6AA3E2DB3D00BE7D17507E9B587A2999DC95AF806B9AFA8AF338C5824471EF7EFD6607381D5DA909DCAD8F7EA7F75DF13D4C5D09AFE9EE5F3E6A2A916D575B07F6E4308FF75D6EB42159D8C07BFE9CC15D34F41F00EB9DE9E4AC9F79D3F836A8CCE48D70DF96E3CA5CAF3C9D66564F84201C3AF985A58C5C4AB77F1DDB8C2AD7EADCFFC1BE283270203010001\",\"credentialData\":[{\"credentialType\":\"Texas Driver's License\",\"DL\":\"18095557\",\"Class\":\"C\",\"Iss\":\"2016-10-28\",\"Exp\":\"2018-01-15\",\"DOB\":\"1980-02-10\",\"name1\":\"Smith\",\"name2\":\"Robert James\",\"address1\":\"123 Main Street\",\"address2\":\"Apartment 007\",\"city\":\"Austin\",\"state\":\"TX\",\"zip\":\"78759\",\"restrictions\":\"NONE\",\"end\":\"NONE\",\"height\":\"6'-01''\",\"sex\":\"M\",\"eyes\":\"BLU\",\"DD\":\"10612631106228619977\",\"image\":\"B6 0A 1E 40 61 0F E1 31 BD 8F A5 95 85 8D 16 56 16 16 5A FC 3F 81 81 21 6C 40 50 61 77 B3 C9 BC 09 54 F2 95 E8 E5 C6 EA 10 14 9A BA 09 22 0A 9D 4E 86 E6 60  3D CF E3 B9 60 FD BE EF 0E C8 38 8E 9E C3 3C CF 3E 25 AE EB B2 94 92 D5 75 6D 6D DB BA E0 B1 17 C4 0E B1 A2 1E 98...\",\"signature\":\"63 F9 94 ED 3B A0 25 A2 CF D9 97 BF 0F F7 57 00 36 CC E5 88  C7 D2 4A BB 7E F6 DE DF 3F 83 97 35 42 16 AE BB 67 0B 61 DB BA 1A F8 82 2E 81 79 9F 3C 9F 66 C1 69 07 AF 0B F8 8C F9 43 FA 3D 6B 0B 3B 2F 3B D2 81 00 7F 27 DB 33 7E 1C 47 AC 73 5D 57 E8 85 F3 3C 83 12 51 31 A0...\",\"fingerprint\":\"C0 86 19 1D 31 0C C2 30 34 1B 74 06 36 60 01 A6 60 5F F8 61 A1 6E D0 3C DF A9 A7 D3 91 AF 86 14 DB 71 64 C9 B8 0A E4 5D FB 28 E8 DB D8 34 9D 25 78 5D 41 94  98 18 71 0F C0 51 07 46 B5 00 0B A0 71 08 86 C5 F7 DE B5 57 93 22 F6 91 54 94 81 76 88 73 05 36 68 BB F8 4D C1 8C...\"}],    \"credentialProviderCredentialUuid\":\"1489328835187-292BA924-EE35-47E0-8AFA-A4C1D418D190\",\"credentialProviderSignatureAlgorithm\":\"SHA512withRSA\",\"credentialProviderSecureHashAlgorithm\":\"SHA-512\",";

		String credentialHash = digest(credential);

		String sessionUuid1 = CryptoUtilities.generateUuid();
		String sessionUuid2 = CryptoUtilities.generateUuid();

		System.out.println("\nsessionUuid1: " + sessionUuid1 + "\nsessionUuid2: " + sessionUuid2);

		try {
			PrivateKey privateKey1 = KeyFactory.getInstance(CryptoUtilities.KEY_FACTORY_ALGORITHM).generatePrivate(
					new PKCS8EncodedKeySpec(CryptoUtilities.hexStringToByteArray(credentialProviderPrivateKey)));

			String signedCredentialHash = generateSignedHex(credentialHash, privateKey1);

			System.out.println("\nsignedCredentialHash: " + signedCredentialHash);

		} catch (InvalidKeySpecException | NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		}

		try {
			long begTime = System.currentTimeMillis();
			System.out.println("\nBegin key pair generation.  This may take a few seconds...");

			// Cipher rsaCipher = Cipher.getInstance("RSA/ECB/OAEPWITHSHA-512ANDMGF1PADDING
			// ");

			KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(CryptoUtilities.KEY_FACTORY_ALGORITHM);

			keyPairGenerator.initialize(PUBLIC_KEY_MODULUS);
			KeyPair pair = keyPairGenerator.generateKeyPair();

			long endTime = System.currentTimeMillis();

			System.out.println("\n            Key Gen Time: " + (endTime - begTime));

			Key publicKey = pair.getPublic();
			Key privateKey = pair.getPrivate();

			System.out.println("\n\n               publicKey: " + CryptoUtilities.toHex(publicKey.getEncoded()));
			System.out.println("\n\n              privateKey: " + CryptoUtilities.toHex(privateKey.getEncoded()));
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}

		for (Provider provider : Security.getProviders()) {
			for (Service service : provider.getServices()) {
				System.out.println(provider.getName() + "  " + service.getType() + "  " + service.getAlgorithm());
			}
		}
	}

	// ------------------------------------------------------------------------------------------------------------------
	// ------------------------------------------------------------------------------------------------------------------

	public static String generateUuid() {
		return System.currentTimeMillis() + "-" + UUID.randomUUID().toString().toUpperCase();
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String generateSessionSpecificPairingServiceUuid() {		
		String uuid = UUID.randomUUID().toString().toLowerCase();
		return Constants.SESSION_SPECIF_PAIRING_PREVIX + uuid.substring(uuid.indexOf("-"));
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String toHex(byte[] data, int length) {

		StringBuffer buf = new StringBuffer();

		for (int i = 0; i != length; i++) {
			int v = data[i] & 0xff;

			buf.append(digits.charAt(v >> 4));
			buf.append(digits.charAt(v & 0xf));
		}

		return buf.toString();
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String toHex(byte[] data) {
		return toHex(data, data.length);
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static byte[] hexStringToByteArray(String s) {

		int len = s.length();
		byte[] data = new byte[len / 2];

		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
		}
		return data;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String digest(String string) {

		logger.info("###Entering");

		try {
			byte[] encrypt = string.getBytes();

			MessageDigest messageDigest = MessageDigest.getInstance(SECURE_HASH_ALGORITHM);
			messageDigest.update(encrypt);

			byte[] digest = messageDigest.digest();

			return toHex(digest);

		} catch (Exception e) {
			logger.error("", e);
			throw new RuntimeException(e);
		}
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String encrypt(String keyHex, String data) {

		logger.info("###Entering");

		String dataEncryptedHex = null;

		/*
		 * Mark the end of the data transmission block in order to remove padding later.
		 */
		data += END_OF_TRANSMISSION_BLOCK;

		try {
			Key key = new SecretKeySpec(hexStringToByteArray(keyHex.trim()), SECRET_KEY_ALGORITHM);

			byte[] dataBytes = data.getBytes();

			SecureRandom random = new SecureRandom();
			byte ivBytes[] = new byte[16];
			random.nextBytes(ivBytes);

			Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
			cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(ivBytes));

			byte[] dataEncryptedBytes = new byte[cipher.getOutputSize(dataBytes.length)];

			int dataEncryptionPointer = cipher.update(dataBytes, 0, dataBytes.length, dataEncryptedBytes);
			dataEncryptionPointer += cipher.doFinal(dataEncryptedBytes, dataEncryptionPointer);

			dataEncryptedHex = toHex(ivBytes) + toHex(dataEncryptedBytes);
			logger.debug("dataEncryptedHex: " + dataEncryptedHex + "  length: " + dataEncryptedHex.length());

		} catch (Exception e) {
			logger.error("", e);
			throw new RuntimeException(e);
		}

		return dataEncryptedHex;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String decrypt(String keyHex, String dataEncryptedHex) {

		logger.info("###Entering");

		String dataDecrypted = null;
		;

		try {

			Key key = new SecretKeySpec(hexStringToByteArray(keyHex), SECRET_KEY_ALGORITHM);

			Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);

			/*
			 * The first sixteen bytes, thirty-two HEX characters, of the encrypted data
			 * represents the initialization vector.
			 */
			cipher.init(Cipher.DECRYPT_MODE, key,
					new IvParameterSpec(CryptoUtilities.hexStringToByteArray(dataEncryptedHex.substring(0, 32))));

			byte[] dataEncryptedBytes = CryptoUtilities.hexStringToByteArray(dataEncryptedHex.substring(32));
			byte[] dataDecryptedBytes = new byte[cipher.getOutputSize(dataEncryptedBytes.length)];

			int dataDecryptionPointer = cipher.update(dataEncryptedBytes, 0, dataEncryptedBytes.length,
					dataDecryptedBytes, 0);
			dataDecryptionPointer += cipher.doFinal(dataDecryptedBytes, dataDecryptionPointer);

			logger.debug("dataDecryptedHex: " + CryptoUtilities.toHex(dataDecryptedBytes));

			/*
			 * Convert the decrypted byte array into a human readable string.
			 */
			dataDecrypted = new String(dataDecryptedBytes);
			logger.debug("dataDecrypted: " + dataDecrypted);

			/*
			 * Remove padding.
			 */
			dataDecrypted = dataDecrypted.substring(0, dataDecrypted.indexOf(END_OF_TRANSMISSION_BLOCK));
			logger.debug("dataDecrypted: " + dataDecrypted);

		} catch (Exception e) {
			logger.error("", e);
			throw new RuntimeException(e);
		}

		return dataDecrypted;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String wrapUserSecurityKeyEncrypted(Key transferKey, String userSecurityKeyEncrypted) {

		String wrappedUserSecurityKeyEncrypted;

		try {
			Cipher wrappingCipher = Cipher.getInstance(CryptoUtilities.WRAPPING_CIPHER_ALGORITHM);
			wrappingCipher.init(Cipher.WRAP_MODE, transferKey);

			Key userSecurityKey = new SecretKeySpec(CryptoUtilities.hexStringToByteArray(userSecurityKeyEncrypted),
					CryptoUtilities.SECRET_KEY_ALGORITHM);

			byte[] wrappedUserSecurityKeyBytes = wrappingCipher.wrap(userSecurityKey);

			wrappedUserSecurityKeyEncrypted = CryptoUtilities.toHex(wrappedUserSecurityKeyBytes);
			logger.debug("wrappedUserSecurityKeyEncrypted: " + wrappedUserSecurityKeyEncrypted);

		} catch (Exception e) {
			logger.error("", e);
			throw new RuntimeException(e);
		}

		return wrappedUserSecurityKeyEncrypted;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String generateSignedHex(String unsignedElement, PrivateKey privateKey) {

		logger.info("###Entering");

		String signedElement = null;

		try {
			/*
			 * Use the privateKey to sign the unsignedElement.
			 */
			Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
			signature.initSign(privateKey);
			signature.update(unsignedElement.getBytes());

			byte[] signedBytes = signature.sign();

			signedElement = toHex(signedBytes);

		} catch (InvalidKeyException | NoSuchAlgorithmException | SignatureException e) {
			e.printStackTrace();
		}

		return signedElement;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String verifyTransactionUuid(String userUuid, String transactionUuid) {

		logger.info("###Entering");

		String messageString = "";

		User user = UserDao.retrieveByUserUuid(userUuid);

		if (user != null) {

			if (CryptoUtilities.isTransactionUuidValid(userUuid, transactionUuid)) {
				messageString = PropertyManager.getInstance().getProperty(Constants.TRANSACTION_UUID_VERIFIED);
			} else {
				messageString = PropertyManager.getInstance().getProperty(Constants.INVALID_TRANSACTION_UUID);
			}

		} else {
			messageString = PropertyManager.getInstance().getProperty(Constants.USER_DOES_NOT_EXIST);
		}

		return messageString;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static boolean isTransactionUuidValid(String userUuid, String transactionUuid) {

		logger.info("###Entering");

		Transaction transaction = TransactionDao.retrieveByUserUuidAndTransactionUuid(userUuid, transactionUuid);

		// A transaction UUID is only valid for one check.

		if (transaction != null && !transaction.isInactiveFlag()) {

			transaction.setInactiveFlag(true);
			TransactionDao.update(transaction);

			return true;

		} else {
			return false;
		}
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String verifySignatureByUserUuid(String userUuid, String unsignedElement, String signedElement) {

		logger.info("###Entering");

		String messageString = "";

		User user = UserDao.retrieveByUserUuid(userUuid);

		if (user != null) {

			return verifySignature(user.getPublicKey(), unsignedElement, signedElement);

		} else {
			messageString = PropertyManager.getInstance().getProperty(Constants.USER_DOES_NOT_EXIST);
		}

		return messageString;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String verifySignature(String publicKeyHex, String unsignedElement, String signedElement) {

		logger.info("###Entering");

		String messageString = "";

		try {
			PublicKey userPublicKey = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
					.generatePublic(new X509EncodedKeySpec(CryptoUtilities.hexStringToByteArray(publicKeyHex)));

			Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
			signature.initVerify(userPublicKey);
			signature.update(unsignedElement.getBytes());

			if (signature.verify(CryptoUtilities.hexStringToByteArray(signedElement))) {
				messageString = PropertyManager.getInstance().getProperty(Constants.SIGNATURE_VERIFIED);
			} else {
				messageString = PropertyManager.getInstance().getProperty(Constants.SIGNATURE_NOT_VERIFIED);
			}
		} catch (Exception e) {
			logger.error("", e);
			messageString = PropertyManager.getInstance().getProperty(Constants.PROBLEM_WITH_VERIFICATION_SERVER);
		}

		return messageString;
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String generatedEncryptedResponse(String transferKeyDecryptedHex, String responseString) {

		logger.info("###Entering");

		try {
			String responseStringEncryptedHex = CryptoUtilities.encrypt(transferKeyDecryptedHex, responseString);

			Key transferKey = new SecretKeySpec(hexStringToByteArray(transferKeyDecryptedHex), SECRET_KEY_ALGORITHM);

			/*
			 * Create a "Message Authentication Code" (MAC) for the returnTransactionUuid
			 * using the transferKey. The MAC will insure message integrity.
			 */
			Mac macReturnTransactionUuid = Mac.getInstance(MAC_ALGORITHM);
			macReturnTransactionUuid.init(transferKey);
			byte[] responseStringEncryptedHashedBytes = macReturnTransactionUuid
					.doFinal(responseStringEncryptedHex.getBytes());

			String responseStringEncryptedHashedHex = CryptoUtilities.toHex(responseStringEncryptedHashedBytes);
			logger.debug("responseStringEncryptedHashedHex: " + responseStringEncryptedHashedHex);

			/*
			 * There is no need for TRANSFER_KEY_ENCRYPTED_HEX (containing the transfer key)
			 * because the mobile app has held the key.
			 */
			return Constants.TRANSFER_DATA_ENCRYPTED_HEX + "=" + responseStringEncryptedHex + "&"
					+ Constants.TRANSFER_DATA_ENCRYPTED_HASHED_HEX + "=" + responseStringEncryptedHashedHex + "&";

		} catch (Exception e) {
			logger.error("", e);
			return null;
		}
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static HashMap<String, String> generateFirebaseTransferDataMap(HashMap<String, String> transferDataMap,
			String publicKeyHex) {

		logger.info("###Entering");

		try {

			/*
			 * Create the secretKey that will be used in generating the message
			 * authentication code.
			 *
			 * This secret key will be included in the encrypted transfer data so that the
			 * user can verify the message authentication code.
			 */
			KeyGenerator generator = KeyGenerator.getInstance(SECRET_KEY_ALGORITHM);
			generator.init(SECRET_KEY_LENGTH);
			Key secretKey = generator.generateKey();

			String secretKeydHex = toHex(secretKey.getEncoded());
			logger.debug("secretKeydHex: " + secretKeydHex);

			// ----------------------------------------------------------------------

			String transferData = "";

			for (Iterator<String> iterator = transferDataMap.keySet().iterator(); iterator.hasNext();) {

				String key = iterator.next();
				String value = transferDataMap.get(key);

				transferData += key + "=" + value + "&";
			}

			transferData += Constants.SECRET_KEY + "=" + secretKeydHex + "&";
			logger.debug("transferData: " + transferData);

			/*
			 * Because users have a very large public key (4096 bytes) we can encrypt a
			 * fairly large block of data (470 bytes) directly through RSA encryption.
			 * https://crypto.stackexchange.com/questions/32692/what-is-the-typical-block-
			 * size-in-rsa
			 * 
			 * This simplifies the process of sending the initial Firebase data to the user
			 * and enables us to use Firebase as an encrypted channel.
			 * 
			 * The limitation of the Firebase data packet is 4KB.
			 * https://firebase.google.com/docs/cloud-messaging/concept-options
			 * 
			 * Typical data sets sent through Firebase:
			 * 
			 * requestType=createCredential&
			 * url=http://www.webauthnplus.com/foundation/RetrieveCredentialMetaData.Action&
			 * sessionUuid=1496727464059-e2956a50-7bbf-4c92-aa77-d5efbf6f4a66&
			 * authenticationCode=VKVL QTBU LKWR& secretKeydHex=
			 * F3B86E686BE5F6F297121C01ADF30084037EBE977E2FD72C9F20DFC747980A60&
			 * 
			 * The length of the data set above is 270 bytes. All values except for the URL
			 * are standard length. This process allows for incredibly long URLs.
			 * 
			 * 
			 * requestType=authentication&
			 * credentialProviderUuid=0b471f42-4123-44d5-bca5-6cb23a275621&
			 * credentialUuid=4471885d-3b47-4ea0-a9db-ce70dc59b4e0&
			 * sessionUuid=1495682929142-654e0d52-9759-45a5-8dfa-6d42ee0a1591&
			 * authenticationCode=GZBU HRQD NEMW& secretKeydHex=
			 * 5B4159EF4C152A6B5FA7B177B63D275571651CB7DEEABA00F03BB6493A49F730&
			 * 
			 * The length of the data set above is 316 bytes. All values are standard
			 * length.
			 * 
			 * If the transfer data exceeds the allowable block size, an
			 * IllegalBlockSizeException will be thrown by the doFinal(byte[] input) method
			 * below.
			 */

			PublicKey publicKey = KeyFactory.getInstance(KEY_FACTORY_ALGORITHM)
					.generatePublic(new X509EncodedKeySpec(hexStringToByteArray(publicKeyHex)));

			Cipher rsaCipher = Cipher.getInstance(RSA_CIPHER_ALGORITHM);

			rsaCipher.init(Cipher.ENCRYPT_MODE, publicKey);
			byte[] transferDataEncryptedBytes = rsaCipher.doFinal(transferData.getBytes());

			String transferDataEncryptedHex = toHex(transferDataEncryptedBytes);
			logger.debug("transferDataEncryptedHex: " + transferDataEncryptedHex);

			// --------------------------------------------------------------------------------------------------------------

			/*
			 * Create a "Message Authentication Code" (MAC) for the transferDataEncryptedHex
			 * using the secretKey. The MAC will insure message integrity.
			 */
			Mac macTransferData = Mac.getInstance(MAC_ALGORITHM);
			macTransferData.init(secretKey);
			byte[] transferDataEncryptedHashedBytes = macTransferData.doFinal(transferDataEncryptedHex.getBytes());

			String transferDataEncryptedHashedHex = toHex(transferDataEncryptedHashedBytes);
			logger.debug("transferDataEncryptedHashedHex: " + transferDataEncryptedHashedHex);

			// --------------------------------------------------------------------------------------------------------------

			HashMap<String, String> encryptedTransferDataMap = new HashMap<String, String>();

			encryptedTransferDataMap.put(Constants.FIREBASE_MSG_TYPE_KEY,
					transferDataMap.get(Constants.FIREBASE_MSG_TYPE_KEY));
			encryptedTransferDataMap.put(Constants.TRANSFER_DATA_ENCRYPTED_HEX, transferDataEncryptedHex);
			encryptedTransferDataMap.put(Constants.TRANSFER_DATA_ENCRYPTED_HASHED_HEX, transferDataEncryptedHashedHex);

			return encryptedTransferDataMap;

		} catch (Exception e) {
			logger.error("", e);
			return null;
		}
	}

	// ------------------------------------------------------------------------------------------------------------------

	public static String hashPassword(final String password, final String salt) {

		try {

			char[] passwordCharacterArray = password.toCharArray();
			byte[] saltBytes = salt.getBytes();

			SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(SECRET_KEY_FACTORY_ALGORITHM);
			PBEKeySpec spec = new PBEKeySpec(passwordCharacterArray, saltBytes, PBE_ITERATION_COUNT, PBE_KEY_LENGTH);
			SecretKey key = secretKeyFactory.generateSecret(spec);
			byte[] encodedSpec = key.getEncoded();

			return toHex(encodedSpec);

		} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
			throw new RuntimeException(e);
		}
	}
}
